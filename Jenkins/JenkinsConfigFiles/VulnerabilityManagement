def label = "mypod-${UUID.randomUUID().toString()}"
podTemplate(label: label, containers: [
    containerTemplate(name: 'zap', image: 'owasp/zap2docker-live', privileged: true, ttyEnabled: true, command: 'cat'),
    containerTemplate(name: 'ubuntu', image: 'ubuntu', ttyEnabled: true, command: 'cat'),
    containerTemplate(name: 'maven', image: 'maven:3.3.9-jdk-8-alpine', ttyEnabled: true, command: 'cat'),
    
      ]) {
 currentBuild.description = "CDP,GDPR,HIPPA,PCI,SOX-${Project_Name}-${Workpod}"
    node(label) {
        properties([pipelineTriggers([cron("${Schedule_Frequency}")]),
        parameters([string(name: 'Schedule_Frequency', defaultValue: "$Schedule_Frequency"),
        string(name: 'URL', defaultValue: "http://a34ffe14581144f8a914f8ece9390834-2125881336.us-east-2.elb.amazonaws.com"),
        string(name: 'Workpod', defaultValue: "$Workpod"),
        string(name: 'Project_Name', defaultValue: "$Project_Name")])
        ])
stage('OWASP top 10 vulnerability checks') {

	container('zap') {
		try{
	
			 sh 'mkdir /zap/wrk'
			 sh 'ls -lart'
			 sh '/zap/zap-baseline.py -t $URL -g gen.conf -r CloveReport.html'
		}
		catch (Exception e)
		{
		  sh 'echo e' 
		}
		finally
		{
		 sh 'ls -lart'
		 sh 'mv /zap/wrk/CloveReport.html Zap.html'
		 sh 'ls -lart'
		 sh 'sleep 10'
	
		 container('ubuntu'){
		     sh 'apt-get update'
		     sh 'apt-get install zip -y'
             sh 'zip Vulnerability_Management.zip Zap.html'
		 container('maven'){
		withCredentials([usernamePassword(credentialsId: 'nexus-creds', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                  sh '''
                  curl --upload-file Vulnerability_Management.zip -u $USERNAME:$PASSWORD -v http://nexus.ethan.svc.cluster.local:8083/nexus/repository/Compliance_Security/${JOB_NAME}/$BUILD_ID/
                  '''
			}	  
		 }
		 	 def vulnerabilities = sh(script: "grep -c 'High' Zap.html", returnStatus: true)
		     if (vulnerabilities == 'High' ) {
                            currentBuild.result = 'SUCCESS'
                } 
                else {
                            currentBuild.result = 'FAILURE'
                            error "Security vulnerabilities found!"
                        }
		}
}


}
}

}
} 