def label = "mypod-${UUID.randomUUID().toString()}"
def serviceaccount = "jenkins-admin"


import java.text.SimpleDateFormat
import java.util.Calendar
def date = Calendar.getInstance();
def timeunits= date.getTimeInMillis();
def dateAfterFiveMin=new Date(timeunits + (5 * 60000));
def dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss")
def formattedDate = dateFormat.format(dateAfterFiveMin)

podTemplate(label: label, serviceAccount: serviceaccount, containers: [
	containerTemplate(name: 'maven', image: 'maven', ttyEnabled: true, command: 'cat', resourceRequestCpu: '150m', resourceLimitCpu: '1000m', resourceRequestMemory: '100Mi', resourceLimitMemory: '5000Mi'),
    
	containerTemplate(name: 'git-secrets', image: 'localhost:32121/root/docker_registry/aiindevops.azurecr.io/git-secrets:0.1', ttyEnabled: true, alwaysPullImage: true, command: 'cat'),
	containerTemplate(name: 'ubuntu', image: 'ubuntu', ttyEnabled: true, command: 'cat'),],
		imagePullSecrets: ['gcrcred'],
) {
    node(label) {  
        
//		def GIT_URL= 'https://eactesting.continuoustestplatform.com/gitlab/root/newtest.git'
		def GIT_CREDENTIAL_ID ='gitlab'
//		def GIT_BRANCH=''
	
        currentBuild.description = "SAST -${Project_Name}- $Workpod"
              properties([pipelineTriggers([cron("${Schedule_Frequency}")]),
        parameters([string(name: 'Schedule_Frequency', defaultValue: "$Schedule_Frequency"),
        string(name: 'GIT_URL' , defaultValue: "$GIT_URL"),
        string(name: 'Workpod', defaultValue: "$Workpod"),
        string(name: 'Project_Name', defaultValue: "$Project_Name")])
        ])  

            stage('Git Checkout') {
	           git branch: "compliance", url: "http://gitlab:8084/gitlab/root/complianceascode_master.git" ,credentialsId: "gitlab"
	           echo "${GIT_URL}"
                def function = load "${WORKSPACE}/JenkinsFunctions_Java.groovy"
                def Nap = load "${WORKSPACE}/git_scan_nonallowed.groovy"
                def Ap = load "${WORKSPACE}/git_scan_allowed.groovy"
                

                // Below two lines are to publish last commited user name and email into jenkins console logs
                sh 'GIT_NAME=$(git --no-pager show -s --format=\'%an\' $GIT_COMMIT)'
                sh 'GIT_EMAIL=$(git --no-pager show -s --format=\'%ae\' $GIT_COMMIT)'

                //publishing reponame and codecommitid, this is required for analytics
               
                def commitId = sh(returnStdout: true, script: 'git rev-parse HEAD')
                echo "codecommitid=${commitId}"

             
        try{
            stage('Git Secrets') {

                container('git-secrets') {
                    Nap.nonAllowedPattern()
                    Ap.AllowedPattern()
                    sh 'git secrets --scan'
                    
                    sh "echo No Secrets exposed >> secrets.txt"
                }
              catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                        sh "exit 0"
                     } 
            }
            }   
    
    catch(Exception e){
    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
        sh "echo Secrets exposed >> secrets.txt"
        sh "exit 1"
    }
} 
    stage('Nexus upload'){
        container('ubuntu'){
		     sh 'apt-get update'
		     sh 'apt-get install zip -y'
             sh 'zip Secrets_check.zip secrets.txt'
        container('maven'){
        withCredentials([usernamePassword(credentialsId: 'nexus-creds', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')])
		    {
              sh '''
                curl --upload-file Secrets_check.zip -u $USERNAME:$PASSWORD -v http://nexus.ethan.svc.cluster.local:8083/nexus/repository/Compliance_Security/${JOB_NAME}/$BUILD_ID/
				 '''
			} }
            }
    }
            }
         }
    }
         